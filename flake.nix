{
  description = "A Nix library for generating Karabiner configurations";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";
    nix-flake-tests.url = "github:antifuchs/nix-flake-tests";
  };

  outputs =
    {
      self,
      nixpkgs,
      nix-flake-tests,
    }:
    let
      lib = nixpkgs.lib;
      karabiner-lib = import ./lib { inherit lib; };
      supportedSystems = [
        "x86_64-linux"
        "i686-linux"
        "aarch64-linux"
        "riscv64-linux"
        "aarch64-darwin"
      ];
      forAllSystems = lib.genAttrs supportedSystems;
    in
    {
      lib = karabiner-lib;

      # packages = {
      #   # An example package that generates a sample config JSON file
      #   example-config = pkgs.runCommand "karabiner-example-config.json" { } ''
      #     # Use builtins.toJSON to convert the Nix set generated by the lib
      #     # Assume your lib has a function `generateExampleConfig` for this
      #     echo '${builtins.toJSON (karabiner-lib.generateExampleConfig or { })}' > $out
      #     # If generateExampleConfig doesn't exist yet, provide a placeholder:
      #     # echo '{}' > $out
      #   '';

      #   default = self.packages.${system}.example-config;
      # };

      checks = forAllSystems (
        system:
        let
          pkgs = nixpkgs.legacyPackages.${system};
        in
        {
          tests = nix-flake-tests.lib.check {
            inherit pkgs;
            tests = (import ./tests { inherit pkgs karabiner-lib; });
          };

          treefmt = pkgs.runCommand "treefmt" { } ''
            ${self.formatter.${system}}/bin/treefmt --ci --working-dir ${self}
            touch $out
          '';
        }
      );

      formatter = forAllSystems (
        system:
        let
          pkgs = nixpkgs.legacyPackages.${system};
        in
        pkgs.writeShellApplication {
          name = "treefmt";
          text = ''treefmt "$@"'';
          runtimeInputs = [
            pkgs.deadnix
            pkgs.nixfmt-rfc-style
            pkgs.treefmt
          ];
        }
      );

      devShells = forAllSystems (
        system:
        let
          pkgs = nixpkgs.legacyPackages.${system};
        in
        {
          default = pkgs.mkShell {
            nativeBuildInputs = [
              self.formatter.${system}
              pkgs.jq
            ];
          };
        }
      );
    };
}
